openapi: 3.0.3
info:
  title: Device location verification API
  description: Service Enabling Network Function API for location verification
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.2.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
#  - BasicAuth: []
#  - apiKey: []
  - three_legged:
    - location-verification-read
servers:
  - url: '{apiRoot}/{basePath}'
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: location-verification/v0
        description: Base path for the device location verification API
paths:
  /verifications:
    post:
      tags:
        - Location verification
      summary: 'Execute location verification for a user equipment'
      operationId: verifyLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyLocationRequest'
        required: true
      responses:
        '200':
          description: Location verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyLocationResponse'
              examples: 
                'True':
                  summary: Match
                  description: The network locates the device within the requested area
                  value:
                    verificationResult: 'TRUE'
                'False':
                  summary: No match
                  description: The requested area does not match the area where the network locates the device
                  value:
                    verificationResult: 'FALSE' 
                'Unknown':
                  summary: Unknown
                  description: The network cannot locate the device
                  value:
                    verificationResult: 'UNKNOWN'
                'Partial':
                  summary: Partial match
                  description: The requested area partially match the area where the network locates the device
                  value:
                    verificationResult: 'PARTIAL' 
                    matchRate: 74
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'
        '503':
          $ref: '#/components/responses/Generic503'
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: '{tokenUrl}'
          scopes: {}
#    BasicAuth:
#      type: http
#      scheme: basic
#    apiKey:
#      type: apiKey
#      description: API key to authorize requests
#      name: apikey
#      in: query
    three_legged:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/authorize
          tokenUrl: https://auth.example.com/token
          scopes:
            location-verification-read: Read device location verification
  schemas:
    Area:
      oneOf: 
        -  $ref: "#/components/schemas/Circle"
      discriminator: 
        propertyName: type
        mapping: 
          Circle:  "#/components/schemas/Circle"
    Circle:
      type: object
      description: Circular area
      required:
        - type
        - location
        - accuracy
      properties:
        type:
          type: string
          description:  Type of this area.
        location:
          $ref: '#/components/schemas/Point'
        accuracy:
          type: number
          description: Expected accuracy for the verification in km, from location (radius)
          minimum: 2
          maximum: 200
      example:
        type: Circle
        location:
          latitude: 50.735851
          longitude: 7.10066
        accuracy: 50
    Point:
      type: object
      description: Coordinates (latitude, longitude) defining a location in a map
      required: 
        - latitude
        - longitude
      properties: 
        latitude:
          $ref: "#/components/schemas/Latitude"
        longitude:
          $ref: "#/components/schemas/Longitude"
      example: 
        latitude: 50.735851
        longitude: 7.10066
    Latitude:
      description: Latitude component of a location
      type: number
      format: double
      minimum: -90
      maximum: 90
      example: 50.735851      
    Longitude:
      description: Longitude component of location
      type: number
      format: double
      minimum: -180
      maximum: 180
      example: 7.10066        
    VerifyLocationRequest:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
        area:
          $ref: '#/components/schemas/Area'
        maxAge:
          $ref: '#/components/schemas/MaxAge'
      required:
        - device
        - area
    VerifyLocationResponse:
      type: object
      required:
        - verificationResult
        - lastLocationTime
      properties:
        lastLocationTime:
          $ref: '#/components/schemas/LastLocationTime'
        verificationResult:
          $ref: '#/components/schemas/VerificationResult'
        matchRate:
          $ref: '#/components/schemas/MatchRate'

    Device:
      type: object
      minProperties: 1
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: One or more parameters allocated to the device that allow it to be identified

    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"
      description: Subscriber number (MSISDN) in E.164 format, starting with country code and optionally prefixed with '+'.

    NetworkAccessIdentifier:
      type: string
      example: "123456789@domain.com"

    DeviceIpv4Addr:
      type: object
      properties:
        publicAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        privateAddress:
          $ref: "#/components/schemas/SingleIpv4Addr"
        publicPort:
          $ref: "#/components/schemas/Port"
      anyOf:
        - required: [publicAddress, privateAddress]
        - required: [publicAddress, publicPort]
      example:
            {
              "publicAddress": "84.125.93.10",
              "publicPort" : 59765
            }
      description: |
        The device should be identified by either the public (observed) IP address and port as seen by the application server, or the private (local) and any public (observed) IP addresses in use by the device (this information can be obtained by various means, for example from some DNS servers).
        
        If the allocated and observed IP addresses are the same (i.e. NAT is not in use) then  the same address should be specified for both publicAddress and privateAddress.
        
        If NAT64 is in use, the device should be identified by its publicAddress and publicPort, or separately by its allocated IPv6 address (field ipv6Address of the Device object)
      
        In all cases, publicAddress must be specified, along with at least one of either privateAddress or publicPort, dependent upon which is known. In general, mobile devices cannot be identified by their public IPv4 address alone.

    SingleIpv4Addr:
      type: string
      description: A single IPv4 address with no subnet mask
      example: "84.125.93.10"
      pattern: '^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$'

    Port:
      type: integer
      minimum: 0
      maximum: 65535

    Ipv6Address:
      type: string
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64
    MaxAge:
      description: The maximum age (in seconds) of the available location, which is accepted for the verification.
      type: number
      format: integer
      minimum: 60
      example: 120
    VerificationResult:
      description: |
        Result of a verification request:
          - `TRUE`: when the network locates the device within the requested area, 
          - `FALSE`: when the requested area does not match the area where the network locates the device,
          - `UNKNOWN`: when the network cannot locate the device,
          - `PARTIAL`: when the requested area partially match the area where the network locates the device. A `match_rate` could be included in the response.
      type: string
      enum:
        - 'TRUE'
        - 'FALSE'
        - 'UNKNOWN'
        - 'PARTIAL'
    MatchRate:
      description: Match rate estimation for the location verification in percent
      type: integer
      minimum: 1
      maximum: 99
    LastLocationTime:
      description: Timestamp of the last location information
      example: 2023-09-07T10:40:52Z
      format: date-time
      type: string
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: 'Invalid input'
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 401
            code: UNAUTHENTICATED
            message: 'Authorization failed: ...'
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 403
            code: PERMISSION_DENIED
            message: 'Operation not allowed: ...'
    Generic404:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 404
            code: NOT_FOUND
            message: 'The specified resource is not found'
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 500
            code: INTERNAL
            message: 'Internal server error'
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorInfo'
          example:
            status: 503
            code: UNAVAILABLE
            message: 'Service unavailable'
